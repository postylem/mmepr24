{"version":3,"file":"index.browser.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"cloze\",\n  version: version,\n  parameters: {\n    /** The cloze text to be displayed. Blanks are indicated by %% signs and automatically replaced by input fields. If there is a correct answer you want the system to check against, it must be typed between the two percentage signs (i.e. % correct solution %). */\n    text: {\n      type: ParameterType.HTML_STRING,\n      default: undefined,\n    },\n    /** Text of the button participants have to press for finishing the cloze test. */\n    button_text: {\n      type: ParameterType.STRING,\n      default: \"OK\",\n    },\n    /** Boolean value indicating if the answers given by participants should be compared against a correct solution given in the text (between % signs) after the button was clicked. If ```true```, answers are checked and in case of differences, the ```mistake_fn``` is called. In this case, the trial does not automatically finish. If ```false```, no checks are performed and the trial automatically ends when clicking the button. */\n    check_answers: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** Boolean value indicating if the answers given by participants should be checked for completion after the button was clicked. If ```true```, answers are not checked for completion and blank answers are allowed. The trial will then automatically finish upon the clicking the button. If ```false```, answers are checked for completion, and in case there are some fields with missing answers, the ```mistake_fn``` is called. In this case, the trial does not automatically finish. */\n    allow_blanks: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /** Function called if ```check_answers``` is set to ```true``` and there is a difference between the participant's answers and the correct solution provided in the text, or if ```allow_blanks``` is set to ```false``` and there is at least one field with a blank answer. */\n    mistake_fn: {\n      type: ParameterType.FUNCTION,\n      default: () => {},\n    },\n  },\n  data: {\n    /** Answers the partcipant gave. */\n    response: {\n      type: ParameterType.STRING,\n      array: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin displays a text with certain words omitted. Participants are asked to replace the missing items. Responses are recorded when clicking a button. Responses can be evaluated and a function is called in case of either differences or incomplete answers, making it possible to inform participants about mistakes before proceeding.\n *\n * @author Philipp Sprengholz\n * @see {@link https://www.jspsych.org/latest/plugins/cloze/ cloze plugin documentation on jspsych.org}\n */\nclass ClozePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var html = '<div class=\"cloze\">';\n    // odd elements are text, even elements are the blanks\n    var elements = trial.text.split(\"%\");\n    const solutions = this.getSolutions(trial.text);\n\n    let solution_counter = 0;\n    for (var i = 0; i < elements.length; i++) {\n      if (i % 2 === 0) {\n        html += elements[i];\n      } else {\n        html += `<input type=\"text\" id=\"input${solution_counter}\" value=\"\">`;\n        solution_counter++;\n      }\n    }\n\n    html += \"</div>\";\n\n    display_element.innerHTML = html;\n\n    const check = () => {\n      var answers: String[] = [];\n      var answers_correct = true;\n      var answers_filled = true;\n\n      for (var i = 0; i < solutions.length; i++) {\n        var field = document.getElementById(\"input\" + i) as HTMLInputElement;\n        answers.push(field.value.trim());\n\n        if (trial.check_answers) {\n          if (answers[i] !== solutions[i]) {\n            field.style.color = \"red\";\n            answers_correct = false;\n          } else {\n            field.style.color = \"black\";\n          }\n        }\n        if (!trial.allow_blanks) {\n          if (answers[i] === \"\") {\n            answers_filled = false;\n          }\n        }\n      }\n\n      if ((trial.check_answers && !answers_correct) || (!trial.allow_blanks && !answers_filled)) {\n        trial.mistake_fn();\n      } else {\n        var trial_data = {\n          response: answers,\n        };\n\n        this.jsPsych.finishTrial(trial_data);\n      }\n    };\n\n    display_element.innerHTML +=\n      '<br><button class=\"jspsych-html-button-response-button\" type=\"button\" id=\"finish_cloze_button\">' +\n      trial.button_text +\n      \"</button>\";\n    display_element.querySelector(\"#finish_cloze_button\").addEventListener(\"click\", check);\n  }\n\n  private getSolutions(text: string) {\n    const solutions = [];\n    const elements = text.split(\"%\");\n    for (let i = 0; i < elements.length; i++) {\n      if (i % 2 == 1) {\n        solutions.push(elements[i].trim());\n      }\n    }\n\n    return solutions;\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const solutions = this.getSolutions(trial.text);\n    const responses = [];\n    for (const word of solutions) {\n      if (word == \"\") {\n        responses.push(this.jsPsych.randomization.randomWords({ exactly: 1 }));\n      } else {\n        responses.push(word);\n      }\n    }\n\n    const default_data = {\n      response: responses,\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    //this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    const inputs = display_element.querySelectorAll('input[type=\"text\"]');\n    let rt = this.jsPsych.randomization.sampleExGaussian(750, 200, 0.01, true);\n    for (let i = 0; i < data.response.length; i++) {\n      this.jsPsych.pluginAPI.fillTextInput(inputs[i] as HTMLInputElement, data.response[i], rt);\n      rt += this.jsPsych.randomization.sampleExGaussian(750, 200, 0.01, true);\n    }\n    this.jsPsych.pluginAPI.clickTarget(display_element.querySelector(\"#finish_cloze_button\"), rt);\n  }\n}\n\nexport default ClozePlugin;\n"],"names":["version","ParameterType","i"],"mappings":"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"}