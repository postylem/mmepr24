{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"cloze\",\n  version: version,\n  parameters: {\n    /** The cloze text to be displayed. Blanks are indicated by %% signs and automatically replaced by input fields. If there is a correct answer you want the system to check against, it must be typed between the two percentage signs (i.e. % correct solution %). */\n    text: {\n      type: ParameterType.HTML_STRING,\n      default: undefined,\n    },\n    /** Text of the button participants have to press for finishing the cloze test. */\n    button_text: {\n      type: ParameterType.STRING,\n      default: \"OK\",\n    },\n    /** Boolean value indicating if the answers given by participants should be compared against a correct solution given in the text (between % signs) after the button was clicked. If ```true```, answers are checked and in case of differences, the ```mistake_fn``` is called. In this case, the trial does not automatically finish. If ```false```, no checks are performed and the trial automatically ends when clicking the button. */\n    check_answers: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** Boolean value indicating if the answers given by participants should be checked for completion after the button was clicked. If ```true```, answers are not checked for completion and blank answers are allowed. The trial will then automatically finish upon the clicking the button. If ```false```, answers are checked for completion, and in case there are some fields with missing answers, the ```mistake_fn``` is called. In this case, the trial does not automatically finish. */\n    allow_blanks: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /** Function called if ```check_answers``` is set to ```true``` and there is a difference between the participant's answers and the correct solution provided in the text, or if ```allow_blanks``` is set to ```false``` and there is at least one field with a blank answer. */\n    mistake_fn: {\n      type: ParameterType.FUNCTION,\n      default: () => {},\n    },\n  },\n  data: {\n    /** Answers the partcipant gave. */\n    response: {\n      type: ParameterType.STRING,\n      array: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin displays a text with certain words omitted. Participants are asked to replace the missing items. Responses are recorded when clicking a button. Responses can be evaluated and a function is called in case of either differences or incomplete answers, making it possible to inform participants about mistakes before proceeding.\n *\n * @author Philipp Sprengholz\n * @see {@link https://www.jspsych.org/latest/plugins/cloze/ cloze plugin documentation on jspsych.org}\n */\nclass ClozePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var html = '<div class=\"cloze\">';\n    // odd elements are text, even elements are the blanks\n    var elements = trial.text.split(\"%\");\n    const solutions = this.getSolutions(trial.text);\n\n    let solution_counter = 0;\n    for (var i = 0; i < elements.length; i++) {\n      if (i % 2 === 0) {\n        html += elements[i];\n      } else {\n        html += `<input type=\"text\" id=\"input${solution_counter}\" value=\"\">`;\n        solution_counter++;\n      }\n    }\n\n    html += \"</div>\";\n\n    display_element.innerHTML = html;\n\n    const check = () => {\n      var answers: String[] = [];\n      var answers_correct = true;\n      var answers_filled = true;\n\n      for (var i = 0; i < solutions.length; i++) {\n        var field = document.getElementById(\"input\" + i) as HTMLInputElement;\n        answers.push(field.value.trim());\n\n        if (trial.check_answers) {\n          if (answers[i] !== solutions[i]) {\n            field.style.color = \"red\";\n            answers_correct = false;\n          } else {\n            field.style.color = \"black\";\n          }\n        }\n        if (!trial.allow_blanks) {\n          if (answers[i] === \"\") {\n            answers_filled = false;\n          }\n        }\n      }\n\n      if ((trial.check_answers && !answers_correct) || (!trial.allow_blanks && !answers_filled)) {\n        trial.mistake_fn();\n      } else {\n        var trial_data = {\n          response: answers,\n        };\n\n        this.jsPsych.finishTrial(trial_data);\n      }\n    };\n\n    display_element.innerHTML +=\n      '<br><button class=\"jspsych-html-button-response-button\" type=\"button\" id=\"finish_cloze_button\">' +\n      trial.button_text +\n      \"</button>\";\n    display_element.querySelector(\"#finish_cloze_button\").addEventListener(\"click\", check);\n  }\n\n  private getSolutions(text: string) {\n    const solutions = [];\n    const elements = text.split(\"%\");\n    for (let i = 0; i < elements.length; i++) {\n      if (i % 2 == 1) {\n        solutions.push(elements[i].trim());\n      }\n    }\n\n    return solutions;\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const solutions = this.getSolutions(trial.text);\n    const responses = [];\n    for (const word of solutions) {\n      if (word == \"\") {\n        responses.push(this.jsPsych.randomization.randomWords({ exactly: 1 }));\n      } else {\n        responses.push(word);\n      }\n    }\n\n    const default_data = {\n      response: responses,\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    //this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    const inputs = display_element.querySelectorAll('input[type=\"text\"]');\n    let rt = this.jsPsych.randomization.sampleExGaussian(750, 200, 0.01, true);\n    for (let i = 0; i < data.response.length; i++) {\n      this.jsPsych.pluginAPI.fillTextInput(inputs[i] as HTMLInputElement, data.response[i], rt);\n      rt += this.jsPsych.randomization.sampleExGaussian(750, 200, 0.01, true);\n    }\n    this.jsPsych.pluginAPI.clickTarget(display_element.querySelector(\"#finish_cloze_button\"), rt);\n  }\n}\n\nexport default ClozePlugin;\n"],"names":["info","version","ParameterType","ClozePlugin","jsPsych","display_element","trial","html","elements","solutions","solution_counter","i","check","answers","answers_correct","answers_filled","field","trial_data","text","simulation_mode","simulation_options","load_callback","responses","word","default_data","data","inputs","rt"],"mappings":"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"}