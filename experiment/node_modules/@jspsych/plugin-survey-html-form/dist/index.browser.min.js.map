{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"survey-html-form\",\n  version: version,\n  parameters: {\n    /** HTML formatted string containing all the input elements to display. Every element has to have its own distinctive name attribute. The <form> tag must not be included and is generated by the plugin. */\n    html: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /** HTML formatted string to display at the top of the page above all the questions. */\n    preamble: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /** The text that appears on the button to finish the trial. */\n    button_label: {\n      type: ParameterType.STRING,\n      default: \"Continue\",\n    },\n    /** The HTML element ID of a form field to autofocus on. */\n    autofocus: {\n      type: ParameterType.STRING,\n      default: \"\",\n    },\n    /** Retrieve the data as an array e.g. [{name: \"INPUT_NAME\", value: \"INPUT_VALUE\"}, ...] instead of an object e.g. {INPUT_NAME: INPUT_VALUE, ...}. */\n    dataAsArray: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** Setting this to true will enable browser auto-complete or auto-fill for the form. */\n    autocomplete: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n  },\n  data: {\n    /**  An object containing the response for each input. The object will have a separate key (variable) for the response to each input, with each variable being named after its corresponding input element. Each response is a string containing whatever the participant answered for this particular input. This will be encoded as a JSON string when data is saved using the `.json()` or `.csv()` functions. */\n    response: {\n      type: ParameterType.COMPLEX,\n      nested: {\n        identifier: {\n          type: ParameterType.STRING,\n        },\n        response: {\n          type:\n            ParameterType.STRING |\n            ParameterType.INT |\n            ParameterType.FLOAT |\n            ParameterType.BOOL |\n            ParameterType.OBJECT,\n        },\n      },\n    },\n    /** The response time in milliseconds for the participant to make a response. */\n    rt: {\n      type: ParameterType.INT,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n *\n * The survey-html-form plugin displays a set of `<inputs>` from a HTML string. The type of input can be freely\n * chosen, for a list of possible input types see the [MDN page on inputs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input).\n * The participant provides answers to the input fields.\n * @author Jan Simson\n * @see {@link https://www.jspsych.org/latest/plugins/survey-html-form/ survey-html-form plugin documentation on jspsych.org}\n */\nclass SurveyHtmlFormPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var html = \"\";\n    // show preamble text\n    if (trial.preamble !== null) {\n      html +=\n        '<div id=\"jspsych-survey-html-form-preamble\" class=\"jspsych-survey-html-form-preamble\">' +\n        trial.preamble +\n        \"</div>\";\n    }\n    // start form\n    if (trial.autocomplete) {\n      html += '<form id=\"jspsych-survey-html-form\">';\n    } else {\n      html += '<form id=\"jspsych-survey-html-form\" autocomplete=\"off\">';\n    }\n\n    // add form HTML / input elements\n    html += trial.html;\n\n    // add submit button\n    html +=\n      '<input type=\"submit\" id=\"jspsych-survey-html-form-next\" class=\"jspsych-btn jspsych-survey-html-form\" value=\"' +\n      trial.button_label +\n      '\"></input>';\n\n    html += \"</form>\";\n    display_element.innerHTML = html;\n\n    if (trial.autofocus !== \"\") {\n      var focus_elements = display_element.querySelectorAll<HTMLInputElement>(\n        \"#\" + trial.autofocus\n      );\n      if (focus_elements.length === 0) {\n        console.warn(\"No element found with id: \" + trial.autofocus);\n      } else if (focus_elements.length > 1) {\n        console.warn('The id \"' + trial.autofocus + '\" is not unique so autofocus will not work.');\n      } else {\n        focus_elements[0].focus();\n      }\n    }\n\n    display_element\n      .querySelector(\"#jspsych-survey-html-form\")\n      .addEventListener(\"submit\", (event) => {\n        // don't submit form\n        event.preventDefault();\n\n        // measure response time\n        var endTime = performance.now();\n        var response_time = Math.round(endTime - startTime);\n\n        var this_form = display_element.querySelector(\"#jspsych-survey-html-form\");\n        var question_data = serializeArray(this_form);\n\n        if (!trial.dataAsArray) {\n          question_data = objectifyForm(question_data);\n        }\n\n        // save data\n        var trialdata = {\n          rt: response_time,\n          response: question_data,\n        };\n\n        // next trial\n        this.jsPsych.finishTrial(trialdata);\n      });\n\n    var startTime = performance.now();\n\n    /**\n     * Serialize all form data into an array\n     * @copyright (c) 2018 Chris Ferdinandi, MIT License, https://gomakethings.com\n     * @param  {Node}   form The form to serialize\n     * @return {String}      The serialized form data\n     */\n    function serializeArray(form) {\n      // Setup our serialized data\n      var serialized = [];\n\n      // Loop through each field in the form\n      for (var i = 0; i < form.elements.length; i++) {\n        var field = form.elements[i];\n\n        // Don't serialize fields without a name, submits, buttons, file and reset inputs, and disabled fields\n        if (\n          !field.name ||\n          field.disabled ||\n          field.type === \"file\" ||\n          field.type === \"reset\" ||\n          field.type === \"submit\" ||\n          field.type === \"button\"\n        )\n          continue;\n\n        // If a multi-select, get all selections\n        if (field.type === \"select-multiple\") {\n          for (var n = 0; n < field.options.length; n++) {\n            if (!field.options[n].selected) continue;\n            serialized.push({\n              name: field.name,\n              value: field.options[n].value,\n            });\n          }\n        }\n\n        // Convert field data to a query string\n        else if ((field.type !== \"checkbox\" && field.type !== \"radio\") || field.checked) {\n          serialized.push({\n            name: field.name,\n            value: field.value,\n          });\n        }\n      }\n\n      return serialized;\n    }\n\n    // from https://stackoverflow.com/questions/1184624/convert-form-data-to-javascript-object-with-jquery\n    function objectifyForm(formArray) {\n      //serialize data function\n      var returnArray = <any>{};\n      for (var i = 0; i < formArray.length; i++) {\n        returnArray[formArray[i][\"name\"]] = formArray[i][\"value\"];\n      }\n      return returnArray;\n    }\n  }\n}\n\nexport default SurveyHtmlFormPlugin;\n"],"names":["info","version","ParameterType","SurveyHtmlFormPlugin","jsPsych","display_element","trial","html","focus_elements","event","endTime","response_time","startTime","this_form","question_data","serializeArray","objectifyForm","trialdata","form","serialized","i","field","formArray","returnArray"],"mappings":"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"}